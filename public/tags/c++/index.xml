<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Это неправильные пчелы</title>
    <link>http://www.romange.com/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Это неправильные пчелы</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Roman Gershman</copyright>
    <lastBuildDate>Fri, 29 Sep 2017 15:46:55 +0300</lastBuildDate>
    
	<atom:link href="http://www.romange.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reloading data structures under high throughput</title>
      <link>http://www.romange.com/2017/09/29/reloading-data-structures-under-high-throughput/</link>
      <pubDate>Fri, 29 Sep 2017 15:46:55 +0300</pubDate>
      
      <guid>http://www.romange.com/2017/09/29/reloading-data-structures-under-high-throughput/</guid>
      <description>&lt;p&gt;Suppose you have a multi-threaded server that serves tens of thousands read queries per second. Those queries use a shared data-structure or index that is mostly immutable during the server run with the exception of periodic index reloads.  How do you implement data reloads in that server while keeping it live and kicking in production?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to serialize integers into memory</title>
      <link>http://www.romange.com/2017/09/26/how-to-serialize-integers-into-memory/</link>
      <pubDate>Tue, 26 Sep 2017 22:46:30 +0300</pubDate>
      
      <guid>http://www.romange.com/2017/09/26/how-to-serialize-integers-into-memory/</guid>
      <description>&lt;p&gt;Here is the analysis of a recent bug I&amp;rsquo;ve stumbled upon. My initial reaction was that
the problem is in the compiler (or that &lt;a href=&#34;https://www.youtube.com/watch?v=PIuE5J9dfAo&#34;&gt;&amp;ldquo;These are wrong bees&amp;rdquo;&lt;/a&gt;). Consider the code below. We copy 64 integers into a properly allocated destination buffer and yet, if compiled with &lt;code&gt;-O3&lt;/code&gt; switch this code crashes with segfault!.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>